{"version":3,"sources":["sorting/merge.js","sorting/quick.js","sorting/bubble.js","sorting/sorting.jsx","App.js","serviceWorker.js","index.js"],"names":["animateMergeSort","array","animation","copyArray","slice","mergeSort","startInd","endInd","midInd","Math","floor","i","i2","j","push","red","gray","height","merge","length","animateQuickSort","quickSort","pivot","left","right","elem","num","idx","console","log","oldVal","from","to","newVal","animateBubbleSort","callback","sorted","n","swap","bubbleSort","defaultCallback","num1","num2","COLOR1","Sorter","props","state","nums","createNums","bind","data","next","random","this","setState","Array","bars","document","getElementsByClassName","red1","red2","gray1","gray2","ind","newHeight","setTimeout","style","backgroundColor","animIncrement","textContent","filter","anim","className","map","id","key","data-value","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.16076532.chunk.js","sourcesContent":["export function animateMergeSort(array) {\n    let animation = [];\n\n    let copyArray = array.slice();\n    mergeSort(array, animation, 0, array.length-1,copyArray);\n    return animation;\n}\n\nfunction mergeSort(array, animation, startInd, endInd, copyArray) {\n    if(startInd === endInd) return;\n\n    let midInd = Math.floor((startInd+endInd)/ 2);\n\n    mergeSort(copyArray, animation, startInd, midInd, array)\n    mergeSort(copyArray, animation, midInd+1, endInd, array)\n\n    merge(array, animation, startInd, midInd, endInd, copyArray);\n}\n\nfunction merge(array, animation, startInd, midInd, endInd, copyArray) {\n\n    let i = startInd;\n    let i2 = startInd;\n    let j = midInd+1;\n\n    while (i <= midInd && j <= endInd){\n\n        if (copyArray[i] <= copyArray[j]){\n\n            animation.push({\n                red: [i,j],\n                gray: [i,j],\n                height: [i2, copyArray[i]]\n            })\n            array[i2++] = copyArray[i++];\n        } else {\n\n            animation.push({\n                red: [i,j],\n                gray: [i,j],\n                height: [i2, copyArray[j]]\n            })\n            array[i2++] = copyArray[j++];\n        }\n\n    }\n\n    while (i <= midInd){\n        animation.push({\n            red: [i,i],\n            gray: [i,i],\n            height: [i2, copyArray[i]]\n        })\n\n        array[i2++] = copyArray[i++];\n\n    }\n\n    while (j <= endInd){\n        animation.push({\n            red: [j,j],\n            gray: [j,j],\n            height: [i2, copyArray[j]]\n        })\n\n        array[i2++] = copyArray[j++];\n\n    }\n  \n}\n","export function animateQuickSort(array) {\n    let animation = [];\n    if(array.length <= 1) return array;\n    // let newArray = array.map((el, id) => { [el, id]})\n    // let copyArray = array.slice();\n    quickSort(array, 0, array.length, animation);\n    return animation;\n}\n\nfunction quickSort(array, startInd, endInd, animation) {\n    // if( array.length <= 1) {\n    //     return array;\n    // }\n    if(endInd - startInd <= 1) return;\n    // let pivot = array.shift();\n    // let left = array.filter((el) => { return el < pivot });\n    // let right = array.filter((el) => { return el >= pivot });\n    // animation.push({\n    //     pivot\n    // })\n    // console.log('array', array)\n\n    let pivot = array[startInd];\n    \n    // let pivotInd = startInd\n    // animation.push([pivotInd]);\n    let left = [];\n    let right = [];\n\n    for(let i = startInd+1; i < endInd; i++){\n        const elem = { num: array[i], idx: i};\n        const receive = pivot > array[i] ? left : right;\n        receive.push(elem);\n    }\n    \n    console.log('left', left, 'pivot', pivot, 'right', right)\n\n    let idx = startInd;\n    for ( let elem of left ) {\n        let oldVal = array[idx];\n        array[idx] = elem.num;\n        animation.push({from: elem.idx, to: idx, oldVal: oldVal, newVal: elem.num});\n        idx++;\n    }\n    animation.push({from: startInd, to: idx, oldVal: array[idx], newVal: pivot});\n    array[idx] = pivot;\n    idx++;\n    for ( let elem of right ) {\n        let oldVal = array[idx];\n        array[idx] = elem.num;\n        animation.push({from: elem.idx, to: idx, oldVal: oldVal, newVal: elem.num});\n        idx++;\n    }\n    console.log(animation);\n\n    let leftSorted = quickSort(array, startInd, startInd + left.length, animation);\n    let rightSorted = quickSort(array, startInd + left.length + 1, endInd, animation);\n\n    // let otherLeft = array.slice(0, startInd);\n    // let otherRight = array.slice(endInd);\n    // console.log('otherLeft', otherLeft)\n    // console.log('otherRight', otherRight)\n    \n\n\n    // array = [...otherLeft, ...left, pivot, ...right, ...otherRight];\n    console.log('array', array)\n    // console.log('startInd', startInd)\n    // console.log('left.length-1', left.length-1)\n    // console.log('left.length+2', left.length+2)\n    // console.log('endInd', endInd)\n    // let leftSorted = quickSort(array, startInd, left.length-1, animation);\n    // let rightSorted = quickSort(array, left.length+2, endInd, animation);\n    // return [ ...leftSorted, pivot, ...rightSorted ];\n}\n\n\n\n","export function animateBubbleSort(array) {\n    let animation = [];\n    if(array.length <= 1) return array;\n    // let newArray = array.map((el, id) => { [el, id]})\n    // let copyArray = array.slice();\n    bubbleSort(array, defaultCallback, animation);\n    return animation;\n}\n\nfunction defaultCallback(num1, num2) {\n    if (num1 < num2) {\n      return -1;\n    } else if (num1 === num2) {\n      return 0;\n    } else {\n      return 1;\n    }\n};\n\nfunction bubbleSort (array, callback, animation) {\n    let sorted = false;\n    while (!sorted) {\n      sorted = true;\n      for (let i = 1, n = array.length; i < n; i++) {\n        if (callback(array[i - 1], array[i]) === 1) {\n          animation.push({from: i-1, to: i, oldVal: array[i - 1], newVal: array[i]});  \n\n          sorted = false;\n          let swap = array[i - 1];\n          array[i - 1] = array[i];\n          array[i] = swap;\n        }\n      }\n    }\n    console.log('array', array)\n    return array;\n};","import React from 'react';\nimport './sorting.css'\nimport { animateMergeSort } from './merge'\nimport { animateQuickSort } from './quick'\nimport { animateBubbleSort } from './bubble'\nconst SCALE = 10;\nconst COLOR1 = 'rgb(218, 218, 218)';\nconst COLOR2 = 'red';\n\nconst animScale = 40;\nconst animIncrement = 10;\n\nconst arraySize = 25;\n\nclass Sorter extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            nums: []\n        }\n        this.createNums = this.createNums.bind(this);\n        this.mergeSort = this.mergeSort.bind(this);\n        this.quickSort = this.quickSort.bind(this);\n        this.bubbleSort = this.bubbleSort.bind(this);\n    }\n\n    createNums() {\n        const data = [];\n        // const data = new Set();\n        // while (data.size < arraySize) {\n        while (data.length < arraySize) {\n            const next = Math.floor(1 + (Math.random() * 50));\n            data.push(next)\n            // data.add(next);\n        }\n\n        this.setState({nums: Array.from(data)});\n    }\n\n    mergeSort() {\n\n        const animation = animateMergeSort(this.state.nums);\n\n        let bars = document.getElementsByClassName('sort-bar');\n\n        for (let i = 0; i < animation.length; i++) {\n\n            let [red1, red2] = animation[i].red;\n            let [gray1, gray2] = animation[i].gray;\n            let [ind, newHeight] = animation[i].height;\n\n            setTimeout(() => {\n                bars[red1].style.backgroundColor = COLOR2;\n                bars[red2].style.backgroundColor = COLOR2;\n            }, i * animScale + animIncrement)\n            setTimeout(() => {\n                bars[gray1].style.backgroundColor = COLOR1;\n                bars[gray2].style.backgroundColor = COLOR1;\n            }, i * animScale + animIncrement * 2)\n            setTimeout(() => {\n                bars[ind].style.height = `${newHeight * SCALE}px`;\n                bars[ind].textContent = `${newHeight}`;\n            }, i * animScale + animIncrement * 3)\n\n        }\n    }\n\n    quickSort(){\n        const animation = animateQuickSort(this.state.nums).filter(anim => anim.from !== anim.to && anim.oldVal !== anim.newVal);\n        console.log('animation', animation)\n        let bars = document.getElementsByClassName('sort-bar');\n        console.log('bars', bars)\n        for (let i = 0; i < animation.length; i++) {\n            let oldVal = animation[i].oldVal\n            let newVal = animation[i].newVal\n            let to = animation[i].to\n            let from = animation[i].from\n        \n            setTimeout(() => {\n                bars[to].style.backgroundColor = COLOR2;\n                bars[from].style.backgroundColor = COLOR2;\n            }, i * animScale + animIncrement)\n\n            setTimeout(() => {\n                bars[to].style.height = `${newVal * SCALE}px`;\n                // bars[from].style.height = `${oldVal * SCALE}px`;\n                // bars[from].textContent = `${oldVal}`;\n                bars[to].textContent = `${newVal}`;\n            }, i * animScale + animIncrement * 2)\n\n            setTimeout(() => {\n                bars[to].style.backgroundColor = COLOR1;\n                bars[from].style.backgroundColor = COLOR1;\n            }, i * animScale + animIncrement * 2)\n\n        }\n\n        // let bars = document.getElementsByClassName('sort-bar');\n    }\n\n    bubbleSort(){\n        const animation = animateBubbleSort(this.state.nums);\n\n        let bars = document.getElementsByClassName('sort-bar');\n        console.log('bars', bars)\n        for (let i = 0; i < animation.length; i++) {\n            let oldVal = animation[i].oldVal\n            let newVal = animation[i].newVal\n            let to = animation[i].to\n            let from = animation[i].from\n        \n            setTimeout(() => {\n                bars[to].style.backgroundColor = COLOR2;\n                bars[from].style.backgroundColor = COLOR2;\n            }, i * animScale + animIncrement)\n\n            setTimeout(() => {\n                bars[to].style.height = `${oldVal * SCALE}px`;\n                bars[from].style.height = `${newVal * SCALE}px`;\n                bars[from].textContent = `${newVal}`;\n                bars[to].textContent = `${oldVal}`;\n            }, i * animScale + animIncrement * 2)\n\n            setTimeout(() => {\n                bars[to].style.backgroundColor = COLOR1;\n                bars[from].style.backgroundColor = COLOR1;\n            }, i * animScale + animIncrement * 2)\n\n        }\n    }\n\n    componentDidMount(){\n        this.createNums()\n    }\n\n    render() {\n        \n        return(\n            <div className='body'>\n                <div className='left'>\n                    <div className='screen-left'>\n                    {this.state.nums.map((num, id) => <div \n                            key={id}\n                            className='sort-bar'\n                            style={{\n                                height: `${num * SCALE}px`,\n                                backgroundColor: `${COLOR1}`\n                            }}\n                            data-value={num}\n                    >{num}</div>)}\n                    </div>\n                    {/* <div className='bucket'>\n                    {[...Array(arraySize).keys()].map((num, id) => <div \n                            key={id}\n                            className='bucket-bar'\n                            \n                    >{num}</div>)}                        \n                    </div> */}\n                </div>\n            \n               <div className='screen-right'>\n                   <h3>Sorting visualization</h3>\n                    <div className='button' onClick={this.createNums}> Generate numbers</div>\n                    <div className='button' onClick={this.mergeSort}> Merge Sort</div>\n                    <div className='button' onClick={this.quickSort}> Quick Sort</div>\n                    <div className='button' onClick={this.bubbleSort}> Bubble Sort</div>\n                </div>\n                \n                \n            </div>\n        )      \n    }\n\n}\n\nexport default Sorter;\n\n\n/*\n\n14 7 22 6 3\n\n\n\n\n*/","import React from 'react';\nimport './App.css';\nimport Sorter from './sorting/sorting'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sorter/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}